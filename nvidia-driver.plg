<?xml version='1.0' standalone='yes'?>
<!DOCTYPE PLUGIN [
  <!ENTITY name      "nvidia-driver">
  <!ENTITY author    "ich777">
  <!ENTITY version   "2021.03.07">
  <!ENTITY launch    "Settings/nvidia-driver">
  <!ENTITY gitURL    "https://github.com/&author;/unraid-&name;/raw/master">
  <!ENTITY pluginURL "&gitURL;/&name;.plg">
  <!ENTITY md5       "b32d781ce9314942d6a69762dacf1989">
  <!ENTITY plugin    "/boot/config/plugins/&name;">
  <!ENTITY emhttp    "/usr/local/emhttp/plugins/&name;">
]>

<PLUGIN  name="&name;" author="&author;" version="&version;" launch="&launch;" pluginURL="&pluginURL;" min="6.9.0-beta31" support="https://forums.unraid.net/topic/98978-plugin-nvidia-driver/">

<CHANGES>

###2021.03.07
- Added Download button to WebGUI to download the Nvidia Driver instantly if no internet connection is available at boot
- Corrected a few typos
- Display Warning message only when downloading the Nvidia Driver

###2021.03.04
- Changed download repo to Github

###2020.12.13
- Fixed bug where the plugin folder isn't removed on a failed download

###2020.11.15
- Added addtional warning to not close the window until the DONE button is displayed at the first installation
- Added link to support thread


###2020.10.27
- Added check if enough space is available on USB boot device
- Description of Plugin page and link changed
- Added driver version selection
- Added check for old packages

###2020.10.24
- Json parsing
- MD5 hash check
- Fallback to latest Nvidia version if version for current Kernel isn't found
- Fallback to local Nvidia version if no Internet connection is available or parsing of release.json failed

###2020.10.23
- Initial release

</CHANGES>

<FILE Run="/bin/bash">
<INLINE>
rm -f $(ls /boot/config/plugins/&name;/&name;*.txz 2>/dev/null|grep -v '&version;')
</INLINE>
</FILE>

<FILE Name="/boot/config/plugins/&name;/&name;-&version;.txz" Run="upgradepkg --install-new">
<URL>&gitURL;/packages/&name;-&version;.txz</URL>
<MD5>&md5;</MD5>
</FILE>

<FILE Name="&emhttp;/README.md">
<INLINE>
**Nvidia Driver**

This Plugin will install the Nvidia drivers to utilize your Nvidia graphics card in your Docker container(s)
</INLINE>
</FILE>

<FILE Run="/bin/bash">
<INLINE>

#Create settings file if not found
if [ ! -f "&plugin;/settings.cfg" ]; then
  echo 'first_installation=true
driver_version=latest
local_version=none' > "&plugin;/settings.cfg"
fi

#Set variables
KERNEL_V="$(uname -r)"
DRIVER_AVAIL="$(wget -qO- https://api.github.com/repos/ich777/unraid-plugins-repo/releases/tags/${KERNEL_V} | jq -r '.assets[].name' | grep -E 'nvidia-.*.txz' | grep -E -v '\.md5$' | awk -F "-" '{print $2}' | sort -V)"
NV_DRV_V="$(grep "driver_version" "&plugin;/settings.cfg" | cut -d '=' -f2)"

#Check Nvidia driver version and set download variable, if Nvidia driver version
#is not found for this kernel fall back to latest, if no Internet connection or parsing of
#release.json failed fall back to local installed version if no local version is found exit.
if [ "${NV_DRV_V}" == "latest" ]; then
    if [ -z "$DRIVER_AVAIL" ]; then
      if [ "$(grep "local_version" "&plugin;/settings.cfg" | cut -d '=' -f2)" == "none" ]; then
        if [ -d &plugin; ]; then
          rm -rf &plugin;
        fi
        echo
        echo "-----ERROR - ERROR - ERROR - ERROR - ERROR - ERROR - ERROR - ERROR - ERROR------"
        echo "---Can't get latest Nvidia driver version and found no installed local driver---"
        exit 1
      else
        NV_DRV_V="$(grep "local_version" "&plugin;/settings.cfg" | cut -d '=' -f2)"
      fi
    else
      DL_DRV="$(echo "$DRIVER_AVAIL" | tail -1)"
      NV_DRV_V="${DL_DRV}"
    fi
else
    if [ -z "$DRIVER_AVAIL" ]; then
      if [ "$(grep "local_version" "&plugin;/settings.cfg" | cut -d '=' -f2)" == "none" ]; then
        if [ -d &plugin; ]; then
          rm -rf &plugin;
        fi
        echo
        echo "-----ERROR - ERROR - ERROR - ERROR - ERROR - ERROR - ERROR - ERROR - ERROR------"
        echo "---Can't get latest Nvidia driver version and found no installed local driver---"
        exit 1
      else
        NV_DRV_V="$(grep "local_version" "&plugin;/settings.cfg" | cut -d '=' -f2)"
      fi
    else
      DL_DRV="$(echo "$DRIVER_AVAIL" | grep "$NV_DRV_V")"
      #Check for old packages that are not suitable for this Kernel and not suitable for the current Nvidia driver version
      rm -f $(ls &plugin;/packages/nvidia-*-1.txz | grep -v "$KERNEL_V")
      rm -f $(ls &plugin;/packages/nvidia-*-1.txz | grep -v "$NV_DRV_V")
      if [ -z "${DL_DRV}" ]; then
        NV_DRV_OLD=${NV_DRV_V}
        DL_DRV="$(echo "$DRIVER_AVAIL" | tail -1)"
        NV_DRV_V="$(echo "$DL_DRV")"
        echo
        echo "---Can't find Nvidia Driver v${NV_DRV_OLD} for your Kernel v${KERNEL_V%%-*} falling back to latest Nvidia Driver v${NV_DRV_V}---"
        sed -i '/driver_version=/c\driver_version=latest' "&plugin;/settings.cfg"
        #Check for old packages that are not suitable for this Kernel and not suitable for the current Nvidia driver version
        rm -f $(ls &plugin;/packages/nvidia-*-1.txz | grep -v "$KERNEL_V")
        rm -f $(ls &plugin;/packages/nvidia-*-1.txz | grep -v "$NV_DRV_V")
      fi
    fi
fi

if [ ! -d "&plugin;/packages" ]; then
  mkdir -p "&plugin;/packages"
fi

#Download Nvidia Driver Package
download() {
if wget -q -nc --show-progress --progress=bar:force:noscroll -O "&plugin;/packages/nvidia-${NV_DRV_V}-${KERNEL_V}-1.txz" "https://github.com/ich777/unraid-plugins-repo/releases/download/${KERNEL_V}/nvidia-${DL_DRV}-${KERNEL_V}-1.txz" ; then
  if [ "$(md5sum "&plugin;/packages/nvidia-${NV_DRV_V}-${KERNEL_V}-1.txz" | cut -d ' ' -f1)" != "$(wget -qO- "https://github.com/ich777/unraid-plugins-repo/releases/download/${KERNEL_V}/nvidia-${DL_DRV}-${KERNEL_V}-1.txz.md5" | cut -d ' ' -f1)" ]; then
    if [ -d &plugin; ]; then
      rm -rf &plugin;
    fi
    echo
    echo "-----ERROR - ERROR - ERROR - ERROR - ERROR - ERROR - ERROR - ERROR - ERROR------"
    echo "--------------------------------CHECKSUM ERROR!---------------------------------"
    exit 1
  fi
  sed -i '/local_version=/c\local_version='${NV_DRV_V}'' "&plugin;/settings.cfg"
  echo
  echo "----Successfully downloaded Nvidia Driver Package v${NV_DRV_V}, please wait!----"
else
  if [ -d &plugin; ]; then
    rm -rf &plugin;
  fi
  echo
  echo "--------------Can't download Nvidia Driver Package v${NV_DRV_V}-----------------"
  exit 1
fi
}

#Check if driver is already downloaded
check() {
if [ ! -f &plugin;/packages/nvidia-${NV_DRV_V}-${KERNEL_V}-1.txz ]; then
  echo
  echo "+=============================================================================="
  echo "| WARNING - WARNING - WARNING - WARNING - WARNING - WARNING - WARNING - WARNING"
  echo "|"
  echo "| Don't close this window with the red 'X' in the top right corner until the 'DONE' button is displayed!"
  echo "|"
  echo "| WARNING - WARNING - WARNING - WARNING - WARNING - WARNING - WARNING - WARNING"
  echo "+=============================================================================="
  echo
  echo "-----------------Downloading Nvidia Driver Package v${NV_DRV_V}------------------"
  echo "----------This could take some time, please don't close this window!------------"
  download
else
  echo
  echo "--------------------Nvidia driver v${NV_DRV_V} found locally---------------------"
fi
}

#Install driver package
install() {
/sbin/installpkg "&plugin;/packages/nvidia-${NV_DRV_V}-${KERNEL_V}-1.txz"
depmod >> /dev/null
modprobe nvidia  >> /dev/null
}

#Check if Nvidia Driver Package is already downloaded
if [ -f /usr/bin/nvidia-smi ]; then
  echo
  echo "-----------------------Nvidia Drivers already installed!-------------------------"
  exit 0
else
  check
fi

#Install Nvidia Driver Package
echo
echo "-----------------Installing Nvidia Driver Package v${NV_DRV_V}-------------------"
install > /dev/null

#Display message to disable and enable Docker on first installation or display successful message
if [ "$(grep "first_installation=" "&plugin;/settings.cfg" | cut -d '=' -f2)" == "true" ]; then
  /usr/local/emhttp/plugins/dynamix/scripts/notify -e "Nvidia Driver" -d "Please make sure to disable and enable Docker if you installed the Nvidia driver for the first time! Settings -> Docker -> Enable Docker 'No' -> Apply -> Enable Docker 'Yes' -> Apply" -i "alert" -l "/Settings/DockerSettings"
  sed -i '/first_installation=true/c\first_installation=false' "&plugin;/settings.cfg"
  echo
  echo "------------Installation of Nvidia driver v${NV_DRV_V} successful----------------"
  echo
  echo "Please make sure to disable and enable Docker if you installed the Nvidia driver for the first time! Settings -> Docker -> Enable Docker 'No' -> Apply -> Enable Docker 'Yes' -> Apply"
else
  echo
  echo "--------------Installation of Nvidia driver v${NV_DRV_V} successful--------------"
fi

</INLINE>
</FILE>

<FILE Run="/bin/bash" Method="remove">
<INLINE>

echo "----------------------------------------"
echo "---Uninstalling Nvidia driver package---"
echo "----------------------------------------"
# Remove plugin related files
removepkg &name;-&version;
rm -rf /usr/local/emhttp/plugins/&name;
rm -rf &plugin;
echo
echo "--------------------------------------------------------------------------------"
echo "-------------Nvidia Driver uninstalled, please reboot your server!--------------"
echo "--------------------------------------------------------------------------------"
echo

</INLINE>
</FILE>
</PLUGIN>
